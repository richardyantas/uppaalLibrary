<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/**
This case study has been published at "Correct System Design"
Symposium in Honor of Ernst-Rüdiger Olderog on the Occasion of
His 60th Birthday Oldenburg, Germany, September 8–9, 2015.

The paper "Safe and Optimal Adaptive Cruise Control" by 
Kim Guldstrand Larsen, Marius Mikučionis, Jakob Haahr Taankvist.

@incollection{cruise,
    year={2015},
    isbn={978-3-319-23505-9},
    booktitle={Correct System Design},
    volume={9360},
    series={Lecture Notes in Computer Science},
    editor={Meyer, Roland and Platzer, André and Wehrheim, Heike},
    doi={10.1007/978-3-319-23506-6_17},
    title={Safe and Optimal Adaptive Cruise Control},
    url={http://dx.doi.org/10.1007/978-3-319-23506-6_17},
    publisher={Springer International Publishing},
    author={Larsen, Kim Guldstrand and Miku\v{c}ionis, Marius and Taankvist, Jakob Haahr},
    pages={260-277},
    language={English}
}
*/

// Place global declarations here.
clock time;
const int maxVelocityEgo = 20;
const int maxVelocityFront = 20;
const int minVelocityEgo = -10;
const int minVelocityFront = -10;

const int maxSensorDistance = 200;

clock waitTimer;

int distance = 10;

int velocityEgo;
int[-2,2] accelerationEgo;
broadcast chan chooseEgo;

int velocityFront;
int[-2,2] accelerationFront;
broadcast chan chooseFront;

void updateDiscrete(){
    int oldVel, newVel;
    oldVel = velocityFront - velocityEgo;

    velocityEgo = velocityEgo + accelerationEgo;
    velocityFront = velocityFront + accelerationFront;

    newVel = velocityFront - velocityEgo;
    
    if (distance &gt; maxSensorDistance) {
        distance = maxSensorDistance + 1;
    } else {
        distance += (oldVel + newVel)/2;
    }
}

broadcast chan update;

// Hybrid stuff
hybrid clock rVelocityEgo;
hybrid clock rVelocityFront;
hybrid clock rDistance;
hybrid clock D;</declaration>
	<template>
		<name x="5" y="5">Ego</name>
		<location id="id0" x="86" y="51">
			<name x="119" y="42">Negative_acc</name>
		</location>
		<location id="id1" x="-204" y="-68">
			<name x="-272" y="-76">No_acc</name>
		</location>
		<location id="id2" x="-34" y="-68">
			<name x="-17" y="-76">Choose</name>
			<committed/>
		</location>
		<location id="id3" x="85" y="-187">
			<name x="75" y="-221">Positive_acc</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-59" y="34">chooseEgo?</label>
			<nail x="-8" y="25"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-59" y="-187">chooseEgo?</label>
			<nail x="-8" y="-161"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-170" y="-119">chooseEgo?</label>
			<nail x="-119" y="-102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="76" y="-34">velocityEgo &gt; minVelocityEgo</label>
			<label kind="assignment" x="76" y="-17">accelerationEgo = -2</label>
			<nail x="59" y="-42"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="68" y="-127">velocityEgo &lt; maxVelocityEgo</label>
			<label kind="assignment" x="68" y="-110">accelerationEgo = 2</label>
			<nail x="59" y="-102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-187" y="-34">accelerationEgo = 0</label>
			<nail x="-119" y="-34"/>
		</transition>
	</template>
	<template>
		<name>Front</name>
		<location id="id4" x="-340" y="-306">
			<name x="-331" y="-331">Faraway</name>
		</location>
		<location id="id5" x="102" y="-136">
			<name x="92" y="-170">Positive_acc</name>
		</location>
		<location id="id6" x="102" y="68">
			<name x="59" y="85">Negative_acc</name>
		</location>
		<location id="id7" x="-102" y="68">
			<name x="-153" y="85">No_acceleration</name>
		</location>
		<location id="id8" x="0" y="-34">
			<name x="17" y="-42">Choose</name>
			<committed/>
		</location>
		<location id="id9" x="-340" y="-238">
			<committed/>
		</location>
		<location id="id10" x="-340" y="-153">
			<committed/>
		</location>
		<branchpoint id="id11" x="-340" y="-195">
		</branchpoint>
		<init ref="id7"/>
		<transition>
			<source ref="id11"/>
			<target ref="id4"/>
			<nail x="-374" y="-195"/>
			<nail x="-374" y="-306"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id11"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-178" y="-323">distance &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-178" y="-306">update?</label>
			<label kind="assignment" x="-178" y="-289">distance = maxSensorDistance+1, accelerationFront = 0</label>
			<nail x="263" y="68"/>
			<nail x="263" y="-306"/>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-204" y="-246">distance &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-204" y="-229">update?</label>
			<label kind="assignment" x="-204" y="-212">distance = maxSensorDistance+1,
accelerationFront = 0</label>
			<nail x="102" y="-229"/>
			<nail x="-204" y="-229"/>
			<nail x="-246" y="-280"/>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="-382" y="17">distance &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-382" y="34">update?</label>
			<label kind="assignment" x="-382" y="51">distance = maxSensorDistance+1,
accelerationFront = 0</label>
			<nail x="-391" y="68"/>
			<nail x="-391" y="-306"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-25" y="68">chooseFront?</label>
			<nail x="0" y="68"/>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-17" y="-153">chooseFront?</label>
			<nail x="0" y="-136"/>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-93" y="17">chooseFront?</label>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="25" y="8">velocityFront &gt; minVelocityFront</label>
			<label kind="assignment" x="25" y="25">accelerationFront = -2</label>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="25" y="-102">velocityFront &lt; maxVelocityFront</label>
			<label kind="assignment" x="25" y="-85">accelerationFront = 2</label>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="assignment" x="-204" y="-8">accelerationFront = 0</label>
			<nail x="-102" y="-8"/>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-365" y="-280">chooseFront?</label>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="select" x="-331" y="-136">i:int[minVelocityFront, maxVelocityFront]</label>
			<label kind="guard" x="-331" y="-119">i &lt;= velocityEgo</label>
			<label kind="assignment" x="-331" y="-102">velocityFront = i,
distance = maxSensorDistance,
rVelocityFront = i * 1.0,
rDistance = 1.0*maxSensorDistance</label>
			<nail x="-340" y="-34"/>
		</transition>
	</template>
	<template>
		<name>Monitor</name>
		<declaration>
double distanceRate(double velFront, double velEgo, double dist){
    if (dist &gt; maxSensorDistance)
        return 0.0;
    else 
        return velFront - velEgo;
}
</declaration>
		<location id="id12" x="-153" y="-144">
			<label kind="invariant" x="-315" y="-127">rVelocityEgo' == accelerationEgo &amp;&amp;
rVelocityFront' == accelerationFront &amp;&amp;
rDistance'  == distanceRate(rVelocityFront,rVelocityEgo, rDistance) &amp;&amp;
D' == rDistance</label>
		</location>
		<location id="id13" x="-306" y="-144">
			<committed/>
		</location>
		<location id="id14" x="255" y="-76">
			<name x="222" y="-59">__RESET__</name>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="assignment" x="-289" y="-169">rDistance = 10</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="assignment" x="179" y="-297">distance = 0, 
velocityEgo = 0, 
velocityFront = 0,
accelerationEgo = 0,
accelerationFront = 0,
rDistance = 0,
rVelocityEgo = 0,
rVelocityFront = 0,
D = 0</label>
			<nail x="323" y="-144"/>
			<nail x="179" y="-144"/>
		</transition>
	</template>
	<template>
		<name>System</name>
		<location id="id15" x="-68" y="-238">
			<name x="-85" y="-272">Done</name>
			<urgent/>
		</location>
		<location id="id16" x="-238" y="-238">
			<name x="-272" y="-272">FrontNext</name>
			<urgent/>
		</location>
		<location id="id17" x="-238" y="-187">
			<name x="-255" y="-170">Wait</name>
			<label kind="invariant" x="-280" y="-153">waitTimer &lt;= 1</label>
		</location>
		<location id="id18" x="-408" y="-238">
			<name x="-433" y="-272">EgoNext</name>
			<urgent/>
		</location>
		<init ref="id18"/>
		<transition controllable="false">
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-450" y="-212">waitTimer == 1</label>
			<label kind="assignment" x="-467" y="-195">updateDiscrete()</label>
		</transition>
		<transition controllable="false">
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-144" y="-195">update!</label>
			<label kind="assignment" x="-144" y="-212">waitTimer = 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-204" y="-255">chooseFront!</label>
		</transition>
		<transition controllable="false">
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-365" y="-255">chooseEgo!</label>
		</transition>
	</template>
	<system>
system Ego, Front, System, Monitor;
    </system>
	<queries>
		<query>
			<formula>simulate 1 [&lt;=100] { accelerationFront - accelerationEgo, rVelocityFront-rVelocityEgo, rDistance}</formula>
			<comment>Validate the state dynamics: the trajectories of relative acceleration, speed and distance between cars.
Click "Check", then right-click the property and inspect the plot.</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>// Safety issues with completely stochastic behavior:</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] distance &gt; 5                                              // false</formula>
			<comment>Is the distance between cars always greater than 5m? i.e. there are no colisions?
Expect false in seconds</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100] (&lt;&gt; distance &lt;= 5)                                  // ~0.90</formula>
			<comment>What is the probability of cars crashing?
Expect 0.9 in 15s, i.e. the cars crash almost surely.</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] {rDistance, distance, 5, 200}</formula>
			<comment>Inspect the rDistance and distance trajectories, 
where distance approximates the dynamics of rDistance.</comment>
		</query>
		<query>
			<formula>simulate 100 [&lt;=100] {rDistance, distance, 5, 200}</formula>
			<comment>Inspect 100 trajectories of distance variables over time.
Expect the values to vary widely between -2000 and +200.
Lower values then 5 correspond to crash.</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] {rVelocityFront, velocityFront}</formula>
			<comment>Inspect that velocityFront approximates the dynamics of rVelocityFront.</comment>
		</query>
		<query>
			<formula>simulate 100 [&lt;=100] {rVelocityFront, velocityFront}</formula>
			<comment>Inspect the speed trajectories of the front car.
The velocityFront approximates rVelocityFront.</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] {rVelocityEgo, velocityEgo}</formula>
			<comment>Inspect that velocityEgo approximates the dynamics of rVelocityEgo.</comment>
		</query>
		<query>
			<formula>simulate 100 [&lt;=100] {rVelocityEgo, velocityEgo}</formula>
			<comment>Inspect the speed trajectories of the ego car.</comment>
		</query>
		<query>
			<formula>simulate 100 [&lt;=100] {rVelocityFront-rVelocityEgo}</formula>
			<comment>Inspect the speed difference between cars.
Negative speed means the ego car is approaching the front car (unsafe).
Observe that the relative speed varies a lot, especially that it can become very negative.</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>// Compute and inspect the safe strategy (restricts behavior to safe states):</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy safe = control: A[] distance &gt; 5 </formula>
			<comment>Find a safe strategy where the distance is kept greater than 5m.
Expect success within 5s.</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] { accelerationFront - accelerationEgo, rVelocityFront-rVelocityEgo, rDistance} under safe</formula>
			<comment>Validate the state dynamics of the safe strategy: the trajectories of relative acceleration, speed and distance between cars.</comment>
		</query>
		<query>
			<formula>simulate 100 [&lt;=100] {rDistance, distance, 5, 200} under safe</formula>
			<comment>Inspect 100 trajectories of distance variables over time while using the safe strategy.
Expect trajectories to vary between 5 and 200, i.e. no crashes.</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100] (&lt;&gt; distance &lt;= 5) under safe                       // &lt;0.01</formula>
			<comment>What is the probability of cars crashing while using safe strategy?
Expect &lt;0.01 in 15s (cannot find a single counter-exmple)</comment>
		</query>
		<query>
			<formula>A[] distance &gt; 5 under safe                                   // true</formula>
			<comment>Is the safe strategy really safe?
Prove by exhaustive exploration.
Expect true (satisfied).</comment>
		</query>
		<query>
			<formula>inf: distance under safe                                      // &gt;=6</formula>
			<comment>Find the smallest distance between cars by exhaustive search.
Expect the distance to be greater than 6, i.e. no crash.</comment>
		</query>
		<query>
			<formula>simulate 100 [&lt;=100] {rVelocityFront-rVelocityEgo} under safe</formula>
			<comment>Inspect the speed difference between cars of the safe strategy.
Negative speed means the ego car is approaching the front car (dangerous).
Observe that the speed does not go below -16 and stays mostly balanced between -6 and 6.</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>// Optimize (refine) the safe strategy into safeFast and inspect:</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy safeFast = minE(D) [&lt;=105]: &lt;&gt; time &gt;= 100 under safe
			</formula>
			<comment>Maximize the progress by minimizing the cumulative distance between cars while driving safely.
Takes up to 2mins with the Discretization step size set to 0.1 (in Options-&gt;Statistical parameters).</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] { accelerationFront - accelerationEgo, rVelocityFront-rVelocityEgo, rDistance} under safeFast</formula>
			<comment>Validate the state dynamics of the safeFast strategy: the trajectories of relative acceleration, speed and distance between cars.</comment>
		</query>
		<query>
			<formula>simulate 100 [&lt;=100] {rDistance, distance, 5, 200} under safeFast</formula>
			<comment>Inspect the distances of the safeFast strategy:
the distance is always greater than 5 (safe),
and it does not allow the front car to go further than ~50m ahead 
(does not reach the limit 200), making the most possible progress.</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>// Compute minimum safe distances for each relative speed value:</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo == -18}: distance under safe  // &gt;=MAXINT, no such states</formula>
			<comment>Find the minimum safe distance when the relative speed is -18 (ego is approaching front)</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo == -16}: distance under safe  // &gt;=70</formula>
			<comment>Find the minimum safe distance when the relative speed is -16 (ego is approaching ego)</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo == -14}: distance under safe  // &gt;=55</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo == -12}: distance under safe  // &gt;=42</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo == -10}: distance under safe  // &gt;=31</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  -8}: distance under safe  // &gt;=22</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  -6}: distance under safe  // &gt;=15</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  -4}: distance under safe  // &gt;=10</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  -2}: distance under safe  // &gt;= 7</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==   0}: distance under safe  // &gt;= 6</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==   2}: distance under safe  // &gt;= 7
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==   4}: distance under safe  // &gt;=10</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==   6}: distance under safe  // &gt;=13</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==   8}: distance under safe  // &gt;=18</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  10}: distance under safe  // &gt;=23</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  12}: distance under safe  // &gt;=40</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  14}: distance under safe  // &gt;=49</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  16}: distance under safe  // &gt;=60</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{velocityFront - velocityEgo ==  18}: distance under safe  // &gt;=MAXINT, no such states</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
